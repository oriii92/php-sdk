<?php
/**
 * SdkOrderProduct
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  RPay\POK\PaymentsSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * RPay API Documentation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RPay\POK\PaymentsSdk\Model;

use \ArrayAccess;
use \RPay\POK\PaymentsSdk\ObjectSerializer;

/**
 * SdkOrderProduct Class Doc Comment
 *
 * @category Class
 * @package  RPay\POK\PaymentsSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TransactionOrder implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'SdkOrderProduct';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'id' => 'string',
        'status' => 'string',
        'description' => 'string',
        'type' => 'string',
        'isSelfAction' => 'bool',
        'isLocked' => 'bool',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime',
        'completedAt' => '\DateTime',
        'initiatingAccountId' => 'string',
        'receivingAccountId' => 'string',
        '_qrData' => 'array<string,string>',
        'receiverAmount' => 'float',
        'receiverCurrencyCode' => 'string',
        'exchangeRate' => 'float',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'id' => null,
        'status' => null,
        'description' => null,
        'type' => null,
        'isSelfAction' => null,
        'isLocked' => null,
        'createdAt' => null,
        'updatedAt' => null,
        'completedAt' => null,
        'initiatingAccountId' => null,
        'receivingAccountId' => null,
        '_qrData' => null,
        'receiverAmount' => null,
        'receiverCurrencyCode' => null,
        'exchangeRate' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'status' => 'status',
        'description' => 'description',
        'type' => 'type',
        'isSelfAction' => 'isSelfAction',
        'isLocked' => 'isLocked',
        'createdAt' => 'createdAt',
        'updatedAt' => 'updatedAt',
        'completedAt' => 'completedAt',
        'initiatingAccountId' => 'initiatingAccountId',
        'receivingAccountId' => 'receivingAccountId',
        '_qrData' => 'qrData',
        'receiverAmount' => 'receiverAmount',
        'receiverCurrencyCode' => 'receiverCurrencyCode',
        'exchangeRate' => 'exchangeRate',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'status' => 'setStatus',
        'description' => 'setDescription',
        'type' => 'setType',
        'isSelfAction' => 'setIsSelfAction',
        'isLocked' => 'setIsLocked',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'completedAt' => 'setCompletedAt',
        'initiatingAccountId' => 'setInitiatingAccountId',
        'receivingAccountId' => 'setReceivingAccountId',
        '_qrData' => 'setQrData',
        'receiverAmount' => 'setReceiverAmount',
        'receiverCurrencyCode' => 'setReceiverCurrencyCode',
        'exchangeRate' => 'setExchangeRate',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'status' => 'getStatus',
        'description' => 'getDescription',
        'type' => 'getType',
        'isSelfAction' => 'getIsSelfAction',
        'isLocked' => 'getIsLocked',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'completedAt' => 'getCompletedAt',
        'initiatingAccountId' => 'getInitiatingAccountId',
        'receivingAccountId' => 'getReceivingAccountId',
        '_qrData' => 'getQrData',
        'receiverAmount' => 'getReceiverAmount',
        'receiverCurrencyCode' => 'getReceiverCurrencyCode',
        'exchangeRate' => 'getExchangeRate',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['isSelfAction'] = $data['isSelfAction'] ?? null;
        $this->container['isLocked'] = $data['isLocked'] ?? null;
        $this->container['createdAt'] = $data['createdAt'] ?? null;
        $this->container['updatedAt'] = $data['updatedAt'] ?? null;
        $this->container['completedAt'] = $data['completedAt'] ?? null;
        $this->container['initiatingAccountId'] = $data['initiatingAccountId'] ?? null;
        $this->container['receivingAccountId'] = $data['receivingAccountId'] ?? null;
        $this->container['_qrData'] = $data['_qrData'] ?? null;
        $this->container['receiverAmount'] = $data['receiverAmount'] ?? null;
        $this->container['receiverCurrencyCode'] = $data['receiverCurrencyCode'] ?? null;
        $this->container['exchangeRate'] = $data['exchangeRate'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];


        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    public function getId(): ?string
    {
        return $this->container['id'];
    }

    public function setId(?string $id): self
    {
        $this->container['id'] = $id;

        return $this;
    }

    public function getStatus(): ?string
    {
        return $this->container['status'];
    }

    public function setStatus(?string $status): self
    {
        $this->container['status'] = $status;

        return $this;
    }

    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    public function setDescription(?string $description): self
    {
        $this->container['description'] = $description;

        return $this;
    }

    public function getType(): ?string
    {
        return $this->container['type'];
    }

    public function setType(?string $type): self
    {
        $this->container['type'] = $type;

        return $this;
    }

    public function getIsSelfAction(): ?bool
    {
        return $this->container['isSelfAction'];
    }

    public function setIsSelfAction(?bool $isSelfAction): self
    {
        $this->container['isSelfAction'] = $isSelfAction;

        return $this;
    }

    public function getIsLocked(): ?bool
    {
        return $this->container['isLocked'];
    }

    public function setIsLocked(?bool $isLocked): self
    {
        $this->container['isLocked'] = $isLocked;

        return $this;
    }

    public function getCreatedAt(): ?\DateTime
    {
        return $this->container['createdAt'];
    }

    public function setCreatedAt(?\DateTime $createdAt): self
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    public function getUpdatedAt(): ?\DateTime
    {
        return $this->container['updatedAt'];
    }

    public function setUpdatedAt(?\DateTime $updatedAt): self
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    public function getCompletedAt(): ?\DateTime
    {
        return $this->container['completedAt'];
    }

    public function setCompletedAt(?\DateTime $completedAt): self
    {
        $this->container['completedAt'] = $completedAt;

        return $this;
    }

    public function getInitiatingAccountId(): ?string
    {
        return $this->container['initiatingAccountId'];
    }

    public function setInitiatingAccountId(?string $initiatingAccountId): self
    {
        $this->container['initiatingAccountId'] = $initiatingAccountId;

        return $this;
    }

    public function getReceivingAccountId(): ?string
    {
        return $this->container['receivingAccountId'];
    }

    public function setReceivingAccountId(?string $receivingAccountId): self
    {
        $this->container['receivingAccountId'] = $receivingAccountId;

        return $this;
    }

    public function getQrData(): ?array
    {
        return $this->container['_qrData'];
    }

    public function setQrData(?array $qrData): self
    {
        $this->container['_qrData'] = $qrData;

        return $this;
    }

    public function getReceiverAmount(): ?float
    {
        return $this->container['receiverAmount'];
    }

    public function setReceiverAmount(?float $receiverAmount): self
    {
        $this->container['receiverAmount'] = $receiverAmount;

        return $this;
    }

    public function getReceiverCurrencyCode(): ?string
    {
        return $this->container['receiverCurrencyCode'];
    }

    public function setReceiverCurrencyCode(?string $receiverCurrencyCode): self
    {
        $this->container['receiverCurrencyCode'] = $receiverCurrencyCode;

        return $this;
    }

    public function getExchangeRate(): ?float
    {
        return $this->container['exchangeRate'];
    }

    public function setExchangeRate(?float $exchangeRate): self
    {
        $this->container['exchangeRate'] = $exchangeRate;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


